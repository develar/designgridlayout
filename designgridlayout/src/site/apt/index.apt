							----------------------
								Introduction
							----------------------
							    Jason Osgood
							----------------------
							
Introduction

	DesignGridLayout is a LayoutManager inspired by the use of canonical grids 
	for user interface design. Its goal is to be useful for typical form-based 
	designs. DesignGridLayout is an alternative to other grid-based layout 
	managers ({{{http://www.jgoodies.com/freeware/forms/index.html}FormsLayout}},
	{{{http://java.sun.com/docs/books/tutorial/uiswing/layout/grid.html}GridLayout}},
	{{{http://java.sun.com/docs/books/tutorial/uiswing/layout/gridbag.html}GridBagLayout}}, 
	{{{http://www.autel.cz/dmi/tutorial.html}HIGLayout}}, 
	{{{http://pnuts.org/snapshot/latest/modules/pnuts.awt/doc/PnutsLayout.html}PnutsLayout}}, 
	{{{http://www.datadosen.se/riverlayout/}RiverLayout}},
	{{{http://www.javaworld.com/javaworld/javatips/jw-javatip129.html}SGLayout}}, and
	{{{http://java.sun.com/products/jfc/tsc/articles/tablelayout/}TableLayout}}).
	DesignGridLayout works with JDK 1.5 and later.

	The idea of user interfaces based on canonical grids is described in the book 
	{{{http://www.amazon.com/gp/product/0133033899}Designing Visual Interfaces: Communication Oriented Techniques}} 
	by Kevin Mullet and Darrell Sano. Available online, Patrizia Nanni's thesis 
	{{{http://www.vhml.org/theses/nannip/HCI_final.htm}Human-Computer Interaction: Principles of Interface Design}}
	has a nice chapter called 
	{{{http://www.vhml.org/theses/nannip/HCI_final.htm#_Toc87596295}Module and Program: Grid-based Design}}, 
	which also references Mullet and Sano's work.

	DesignGridLayout's primary innovation is a well behaved simple layout algorithm 
	exposed as a convenient API. No need to specify constraints. Just add rows from 
	top to bottom and components from left to right. Sizing, resizing, aligning 
	component baselines, margins, and gutters are all handled automatically.

Praise

	<Very impressive, and you nailed it!> \
	-- Darrell Sano, March 21st, 2006
	
Quick Start

	Try it now using webstart: {{{examples.jnlp}DesignGridLayout Examples}}

	Try it offline: Download both 
	{{{https://designgridlayout.dev.java.net/files/documents/4350/42100/designgridlayout-0.1.1.jar}designgridlayout-0.1.jar}}
	and {{{https://swing-layout.dev.java.net/files/documents/2752/25312/swing-layout-1.0.jar}swing-layout-1.0.jar}}.
	Add them to your classpath. Launch the examples with 
	<<<java net.java.dev.designgridlayout.Examples>>>.  

	Keep reading for explanations and screenshots.

Canonical Grid

	Canonical grids are visual tools used by graphic artists to design magazines, 
	posters, advertisements, forms, and so forth. As an artist friend told the 
	original author of DesignGridLayout, the use of grids is "graphic design 101, 
	taught on the first day".
	
	Here are the steps to create a simple 4 column canonical grid. First, divide 
	the rectangle horizontally into halves (1/2). The light gray represents the 
	gaps (for gutters and margins) between columns.

[images/grid-halves.png]
	
	Then add divisions for thirds (1/3).

[images/grid-thirds.png]
	
	Lastly, add divisions for fourths (1/4).
	
[images/grid-fourths.png]
	
	Voila! The black lines represent the 4 column canonical grid.

	For each row, the row is divided by the number of components you add. Adding 
	two components divides the grid in half. Adding three components divides 
	the grid in thirds.

	So here's an example. 
	
[images/grid-example.png]

	See how everything lines up nicely? There's two interesting cases to note.  

	*	Row 3 has just two components, but the row is divided in thirds. That's 
		because the first component spans 2 columns, so the total number of 
		components is considered to be 3.

	*	Row 4 has no component in the fourth column. Rows having empty columns 
		is common for forms.

	[]
	
Simple Examples

	First, we'll build a simple form based on the 4 column canonical grid shown 
	above. Example 1a shows how to use the DesignGridLayout layout manager, add 
	rows to the grid, and add components to rows.
	
+------------------------------------------------------------------------------+
package net.java.dev.designgridlayout;

import javax.swing.*;

public class Example1a 
{
    public static void main(String[] args) 
    {
        JFrame frame = new JFrame("Example 1a");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JPanel top = new JPanel();		
        DesignGridLayout layout = new DesignGridLayout(top);
        top.setLayout(layout);

        // You can add components one line at a time
        IRow row = layout.row();
        row.add(button());
        row.add(button());

        // Or using method chaining
        layout.row().add(button()).add(button());

        // Or, even better, using variable arguments
        layout.row().add(button(), button());

        frame.add(top);
        frame.pack();
        frame.setVisible(true);
    }

    public static JButton button()
    {
        return new JButton("Button");
    }
}
+------------------------------------------------------------------------------+

[images/Example1a.png] Example 1a

	{{{href="https://designgridlayout.dev.java.net/source/browse/designgridlayout/src/test/java/net/java/dev/designgridlayout/Example1a.java?view=markup}(Example 1a source)}}

	Example 1b reflects the design from the prior section.
	
+------------------------------------------------------------------------------+
layout.row().add(button()).add(button());
layout.row().add(button()).add(button()).add(button());
layout.row().add(button(), 2).add(button());
layout.row().add(button()).add(button()).add(button()).empty();
+------------------------------------------------------------------------------+

[images/Example1b.png] Example 1b

	{{{href="https://designgridlayout.dev.java.net/source/browse/designgridlayout/src/test/java/net/java/dev/designgridlayout/Example1b.java?view=markup}(Example 1b source)}}

	Some cool things to note:

	*	You do not specify the number of rows and columns for the canonical grid. 
		Nor do you specify each component's location. DesignGridLayout is order 
		dependent. Just add rows to the grid and components to rows, in order.
		DesignGridLayout determines the columns and their widths automatically.

	*	Row 3's first component spans 2 columns. As shown, use the method 
		<<<add(JComponent child, int span)>>> when you need to specify a span 
		greater than 1.

	*	Row 4's has no fourth component. As shown, use method <<<IGridRow.empty()>>>
		for each empty column you need.

	[]
	
	Most forms have labels for each row. So let's add some for Example 1c.

+------------------------------------------------------------------------------+
layout.row().label(new JLabel("Row 1")).add(button().add(button());
layout.row().label(new JLabel("Row 2")).add(button().add(button().add(button());
layout.row().label(new JLabel("Row 3")).add(button(), 2).add( button());
layout.row().label(new JLabel("Row 4")).add(button()).add(button()).add(button()).empty());
+------------------------------------------------------------------------------+

[images/Example1c.png] Example 1c

	{{{href="https://designgridlayout.dev.java.net/source/browse/designgridlayout/src/test/java/net/java/dev/designgridlayout/Example1c.java?view=markup}(Example 1c source)}}

	In Example 1c above, labels do not get resized if the window is resized, only
	components from grid columns get resized on such event.

	Another common exception to the canonical grid are the "Cancel" and "OK" 
	buttons found in dialog boxes. DesignGridLayout allows you to create rows with
	either grid, left, right, or center alignment per row.  We'll also add a blank 
	row with some additional height, to add space before the "Cancel" and "OK" 
	buttons.

+------------------------------------------------------------------------------+
layout.emptyRow(20);
layout.rightRow().add(new JButton("Cancel")).add(new JButton("OK"));
+------------------------------------------------------------------------------+

[images/Example1d.png] Example 1d

	{{{href="https://designgridlayout.dev.java.net/source/browse/designgridlayout/src/test/java/net/java/dev/designgridlayout/Example1d.java?view=markup}(Example 1d source)}}

Interesting Examples

	John O'Conner started the {{{http://weblogs.java.net/blog/joconner/archive/2006/10/layout_manager.html}Layout Manager Showdown}},
	pitting everyone's favorite layout manager against all challengers in 
	no-holds-barred cage fight. Here's the entry for DesignGridLayout:

[images/AddressBookDemo.png] Address Book Demo

	{{{href="https://designgridlayout.dev.java.net/source/browse/designgridlayout/src/test/java/net/java/dev/designgridlayout/AddressBookDemo.java?view=markup}(AddressBookDemo source)}}

	While creating DesignGridLayout, the original author used figures 177, 178 
	and 179 from "Designing Visual Interfaces" to help validate and work through 
	his ideas. He found scans of the original figures 
	{{{http://www.evl.uic.edu/aej/422/week11.html}in this online syllabus}}
	(scroll down to the bottom).  Here are the screenshots from matching those 
	figures while using DesignGridLayout.
	
[images/Figure177.png] Figure 177

	{{{href="https://designgridlayout.dev.java.net/source/browse/designgridlayout/src/test/java/net/java/dev/designgridlayout/Figure177.java?view=markup}(Figure177 source)}}

[images/Figure178.png] Figure 178

	{{{href="https://designgridlayout.dev.java.net/source/browse/designgridlayout/src/test/java/net/java/dev/designgridlayout/Figure178.java?view=markup}(Figure178 source)}}

[images/Figure179.png] Figure 179

	{{{href="https://designgridlayout.dev.java.net/source/browse/designgridlayout/src/test/java/net/java/dev/designgridlayout/Figure179.java?view=markup}(Figure179 source)}}

Acknowledgements

	DesignGridLayout relies on the component baseline functionality from the 
	{{{https://swing-layout.dev.java.net/}Swing Layout project}}. The baseline 
	work is non-trivial and an important contribution to user interface 
	development. DesignGridLayout authors are grateful for the efforts of 
	{{{href="http://weblogs.java.net/blog/zixle/}Scott Violet}} and all other 
	contributors.
	
	Karsten Lentzsch, of {{{http://www.jgoodies.com}JGoodies}} fame, has probably 
	been the most influential contributor towards making professional, high 
	quality user interfaces in Swing. He was definitely one of the first. His 
	efforts have been a source of inspiration.

Building from source

	You can build DesignGridLayout directly from its source code. For this you
	must first check out current version from Subversion repository (TODO LINK####).
	
	Then, make sure you have JDK 5 and maven (2.0.8 or more recent) installed on
	your machine.
	
	Running <<<mvn install>>> from the command line will compile and test 
	DesignGridLayout (note that tests will take hold of the mouse and keyboard 
	so you not interfere during these).
	
	You may also run <<<mvn eclipse:eclipse>>> to generate an eclipse project 
	that you can then import into your Eclipse workspace.
	
	Finally, you may use ant rather than maven to build DesignGridLayout but in
	this case the build is "minimalistic" and does not include tests.
	