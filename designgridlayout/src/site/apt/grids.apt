							-----------------------
								Canonical Grids
							-----------------------
							      Jason Osgood
							-----------------------
							
Canonical grids

	The idea of user interfaces based on canonical grids is described in the book 
	{{{http://www.amazon.com/gp/product/0133033899}Designing Visual Interfaces: Communication Oriented Techniques}} 
	by Kevin Mullet and Darrell Sano. Available online, Patrizia Nanni's thesis 
	{{{http://www.vhml.org/theses/nannip/HCI_final.htm}Human-Computer Interaction: Principles of Interface Design}}
	has a nice chapter called 
	{{{http://www.vhml.org/theses/nannip/HCI_final.htm#_Toc87596295}Module and Program: Grid-based Design}}, 
	which also references Mullet and Sano's work.

	Canonical grids are visual tools used by graphic artists to design magazines, 
	posters, advertisements, forms, and so forth. As an artist friend told the 
	original author of DesignGridLayout, the use of grids is "graphic design 101, 
	taught on the first day".
	
	Here are the steps to create a simple 4 column canonical grid. First, divide 
	the rectangle horizontally into halves (1/2). The light gray represents the 
	gaps (for gutters and margins) between columns.

[images/grid-halves.png]
	
	Then add divisions for thirds (1/3).

[images/grid-thirds.png]
	
	Lastly, add divisions for fourths (1/4).
	
[images/grid-fourths.png]
	
	Voila! The black lines represent the 4 column canonical grid.

	For each row, the row is divided by the number of components you add. Adding 
	two components divides the grid in half. Adding three components divides 
	the grid in thirds.

	So here's an example. 
	
[images/grid-example.png]

	See how everything lines up nicely? There's two interesting cases to note.  

	*	Row 3 has just two components, but the row is divided in thirds. That's 
		because the first component spans 2 columns, so the total number of 
		components is considered to be 3.

	*	Row 4 has no component in the fourth column. Rows having empty columns 
		is common for forms.

	[]
	
DesignGridLayout Grids and "Sub-grids"

	Normal Canonical grids work well as long as we don't use a label column. 
	Indeed, it is common to have forms that have a first column made exclusively 
	of labels defining the fields that follow.
	
	For this reason, DesignGridLayout extends the possibilities of canonical
	grids by putting the extra label column outside of the grid, which means
	that its width is always fixed (and equal to the largest width of all labels
	put in that column).
	
	However, it is also not uncommon to have forms that have several vertical
	"groups" of input fields, each with their own label column. 
	DesignGridLayout supports this through the use of "sub-grids".
	
	The "sub-grid" concept is defined as follows:
		
	*	Each layout is made of a certain number of sub-grids
	
	*	The actual number of sub-grids of a layout is determined by the row that
		defines the biggest number of sub-grids
	
	*	Each sub-grid is made of a label column (with fixed width) and one or 
		several component columns (which width is managed canonically)
	
	*	The label column of each sub-grid has its own width (independently of 
		the width of other label columns)
		
	*	The remaining available horizontal space (container width less the 
		widths used by all label columns of all sub-grids) is equally shared
		between all sub-grids (more exactly, between the canonical parts of all
		sub-grids)
	
	*	It is possible, in a row, to define a "wide" sub-grid that spans several 
		sub-grids of the layout. In this case, all components of this sub-grid
		will form a canonical grid which width spans several sub-grids (in
		roughly the same way that one component inside a canonical grid can span
		several columns)
		
	[]
	
	The example below summarizes these principles:
	
[images/subgrids.png]

	In this example you can see 2 sub-grids, each with its label column (of
	different widths due to the max length of labels). Canonical parts of both
	sub-grids are equal in size. In the second row, there is no label for the
	second sub-grid. Finally, the last row has only one sub-grid that spans
	both sub-grids defined in other rows.

	You will find more concrete examples {{{usage.html}here}}.
	