							----------------------
								    Usage
							----------------------
							    Jason Osgood
							----------------------
							
First steps

	Using DesignGridLayout is quite straitghtforward once you have understood
	its basic principles.
	
	Moreover, thanks to its fluent API, there is no room
	for errors at runtime, as compared to other <<<LayoutManager>>>s that require
	to add components to the <<<Container>>> along with hard to read codes, 
	hard-coded as Strings.
	
	Contrarily to almost every other <<<LayoutManager>>>, DesignGridLayout does
	not allow you to directly add components to a container; instead, adding 
	components can only be performed, safely, through DesignGridLayout API itself.
	
	For example, for a usual LayoutManager, you may do:
	
+------------------------------------------------------------------------------+
public class MyPanel extends JPanel {
    public MyPanel() {
        setLayout(new BorderLayout());
        add(new JLabel("Hello"), BorderLayout.NORTH);
    }
}
+------------------------------------------------------------------------------+

	But with DesignGridLayout:
	
+------------------------------------------------------------------------------+
public class MyPanel extends JPanel {
    public MyPanel() {
        DesignGridLayout layout = new DesignGridLayout(this);
        layout.row().grid().add(new JLabel("Hello"));
    }
}
+------------------------------------------------------------------------------+
	
	In this very simple example, you can see that <<<layout>>> is the principal
	object to be used for adding components to the container. Please also note
	that with DesignGridLayout, you don't need to explicitly call <<<setLayout>>>
	on the container, DesignGridLayout takes care of that for you.
	
	For every row of components you want created in a container, you need to call 
	<<<layout.row()>>> (or one of the alternatives to <<<row()>>>, explained
	later). This returns an object (a "row") which provides its own API to add
	components to this row.
	
	Rows are created vertically from top to bottom, in the same order as lines
	of code that call <<<layout.row()>>>. Inside one row, you add components 
	from left to right in the same order calls to <<<add()>>> appear in each row.
	
	Hence this allows you to "visualize" the container layout just by viewing
	the source code:
	
+------------------------------------------------------------------------------+
DesignGridLayout layout = new DesignGridLayout(this);
layout.row().grid(new JLabel("First name")).add(new JTextField());
layout.row().grid(new JLabel("Last name")).add(new JTextField());
+------------------------------------------------------------------------------+
	
	The snippet above creates 2 rows, each with a label and a text field.

	Moreover, this allows inserting a new row without any hassle (try to imagine
	the following snippet with GridBagLayout...):
	
+------------------------------------------------------------------------------+
DesignGridLayout layout = new DesignGridLayout(this);
layout.row().grid(new JLabel("First name")).add(new JTextField());
layout.row().grid(new JLabel("Middle initial")).add(new JTextField());
layout.row().grid(new JLabel("Last name")).add(new JTextField());
+------------------------------------------------------------------------------+
	
	DesignGridLayout always takes care of the correct spacing between components
	inside the container, without requiring you to specify any value. In addition,
	all components inside a row are automatically "baseline-aligned".

DesignGridLayout API by example

	After the first steps, this section gives more details and explanations on
	DesignGridLayout API through simple examples. The source for all examples is
	available in DesignGridLayout 
	{{{https://designgridlayout.dev.java.net/files/documents/4350/122556/designgridlayout-1.1p1-test-sources.jar}test sources archive}}.
	
	Although not mandatory, it is advised to first read the DesignGridLayout
	{{{./index.html}Introduction}}.
	
	First, we demonstrate 3 equivalent ways to add components to a row. Please 
	note the first way is not recommended (it is shown for the sake of 
	exhaustiveness). Using the second or third way is a matter of personal taste;
	some developers prefer method chaining because it helps better visualizing 
	the layout in the code, while other developers prefer to call <<<add()>>> 
	once with all the components in the row, to save some typing.
	
+------------------------------------------------------------------------------+
package net.java.dev.designgridlayout;

import javax.swing.*;

public class Basics1SimpleGrid 
{
    public static void main(String[] args) 
    {
        JFrame frame = new JFrame("Example 1");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        JPanel top = new JPanel();		
        DesignGridLayout layout = new DesignGridLayout(top);

        // You can add components one line at a time (not advised)
        IRow row = layout.row().grid();
        row.add(button());
        row.add(button());

        // Or using method chaining
        layout.row().grid().add(button()).add(button());

        // Or, even better, using variable arguments
        layout.row().grid().add(button(), button());

        frame.add(top);
        frame.pack();
        frame.setVisible(true);
    }

    public static JButton button()
    {
        return new JButton("Button");
    }
}
+------------------------------------------------------------------------------+

[images/Basics1SimpleGrid-org.png] Example 1: Simple grid

	{{{./xref-test/net/java/dev/designgridlayout/Basics1SimpleGrid.html}(Example 1 source)}}

	Then, we'll build a simple form based on the 4 column canonical grid shown 
	below: 
	
[images/grid-example.png]

	Example 2 reflects the design above.
	
+------------------------------------------------------------------------------+
layout.row().grid().add(button()).add(button());
layout.row().grid().add(button()).add(button()).add(button());
layout.row().grid().add(button(), 2).add(button());
layout.row().grid().add(button()).add(button()).add(button()).empty();
+------------------------------------------------------------------------------+

[images/Basics2GridColumns-org.png] Example 2: Grid columns

	{{{./xref-test/net/java/dev/designgridlayout/Basics2GridColumns.html}(Example 2 source)}}

	Some cool things to note:

	*	You do not specify the number of rows and columns for the canonical grid. 
		Nor do you specify each component's location. DesignGridLayout is order 
		dependent. Just add rows to the grid and components to rows, in order.
		DesignGridLayout determines the columns and their widths automatically.

	*	Row 3's first component spans 2 columns. As shown, use the method 
		<<<add(JComponent child, int span)>>> when you need to specify a span 
		greater than 1.

	*	Row 4's has no fourth component. As shown, use method <<<IGridRow.empty()>>>
		for each empty column you need.

	[]
	
	Most forms have labels for each row. So let's add some for Example 3.

+------------------------------------------------------------------------------+
layout.row().grid(new JLabel("Row 1")).add(button().add(button());
layout.row().grid(new JLabel("Row 2")).add(button().add(button().add(button());
layout.row().grid(new JLabel("Row 3")).add(button(), 2).add( button());
layout.row().grid(new JLabel("Row 4")).add(button()).add(button()).add(button()).empty());
+------------------------------------------------------------------------------+

[images/Basics3GridLabels-org.png] Example 3: Grid with labels

	{{{./xref-test/net/java/dev/designgridlayout/Basics3GridLabels.html}(Example 3 source)}}

	In Example 3 above, labels do not get resized if the window is resized, only
	components from grid columns get resized on such event.

	Another common exception to the canonical grid are the "Cancel" and "OK" 
	buttons found in dialog boxes. DesignGridLayout allows you to create rows with
	either grid, left, right, or center alignment per row.  We'll also add a blank 
	row with some additional height, to add space before the "Cancel" and "OK" 
	buttons.

+------------------------------------------------------------------------------+
layout.emptyRow();
layout.row().right().add(new JButton("Cancel")).add(new JButton("OK"));
+------------------------------------------------------------------------------+

[images/Basics4RightRow-org.png] Example 4: Grid and right-aligned row

	{{{./xref-test/net/java/dev/designgridlayout/Basics4RightRow.html}(Example 4 source)}}

Forms with several label columns

	DesignGridLayout also allows you to design large forms that contain several
	groups of components, each with its own dedicated label column.
	
	Here is a snippet that implements the example of sub-grids found in 
	{{{./grids.html}this page on canonical grids}}:
	
+------------------------------------------------------------------------------+
layout.row().grid(label("Label 1:")).add(button(), button())
                          .grid(label("Long Label 1:")).add(button(), button());
layout.row().grid(label("Lbl 2:"))  .add(button(), button(), button())
                          .grid()                      .add(button(), button());
layout.row().grid(label("Label 3:")).add(button(), 2).add(button())
                          .grid(label("Label 3+:"))    .add(button(), 2).add(button());
layout.row().grid(label("Lbl 4:"))  .add(button());
+------------------------------------------------------------------------------+

Components spanning several rows

	DesignGridLayout enables you to define components that span several rows.
	This is particularly useful in forms that contain "high" components such as
	<<<JList>>>, <<<JTable>>>, <<<JSlider>>>.
	
	Of course, DesignGridLayout already supports smart vertical resize for rows
	containing such high components, without having to span several rows.
	However, in some situations (e.g. forms that contain a lot of components
	like <<<JTextField>>> and only one or a few higher components), it can be 
	useful to have a couple of normal rows with <<<JTextField>>> components and
	one <<<JList>>> spanning all those rows, for example.
	
	The following snippet shows the simplest example of a row-span component:

+------------------------------------------------------------------------------+
layout.row().grid(label("Label 1:")).add(field1).add(list);
layout.row().grid(label("Label 2:")).add(field2).spanRow();
+------------------------------------------------------------------------------+

	That snippet will display as follows:
	
[images/RowSpan5SimplestExample-org.png] Example: List spanning two rows

	You can also use row-span components with forms with several label columns:
	
+------------------------------------------------------------------------------+
layout.row().grid(label("Label 1:")).add(field1).grid(label("List:")).add(list);
layout.row().grid(label("Label 2:")).add(field2).grid().spanRow();
+------------------------------------------------------------------------------+

	which will show as follows:
	
[images/RowSpan6SimpleExampleOnTwoGrids-org.png] Example: Row-span and multi-grid

	Please note that, contrarily to all other DesignGridLayout features, this 
	special feature cannot prevent incorrect usage of the method <<<spanRow()>>>;
	Hence, when <<<spanRow()>>> has been used incorrectly, rather than throwing
	an exception at runtime, DesignGridLayout will display a special marker on
	positions where <<<spanRow()>>> could not properly work.
	
	The following example exhibits many situations where <<<spanRow()>>> is
	misused; you can see a screenshot of the result below:
	
+------------------------------------------------------------------------------+
// spanrow() called in first row
layout.row().grid(label("lbl0")).spanRow();
layout.row().center().fill().add(new JSeparator());

// spanrow() called on a subgrid with different number of columns
layout.row().grid(label("lbl1")).add(field("field1"), field("field1"), field("field1"));
layout.row().grid(label("lbl2")).add(field("field2")).spanRow();
layout.row().center().fill().add(new JSeparator());

// spanrow() called with no matching item
layout.row().grid(label("lbl1")).add(field("field1"), 2);
layout.row().grid(label("lbl2")).add(field("field2")).spanRow();
layout.row().center().fill().add(new JSeparator());

// spanrow() called with no matching item
layout.row().grid(label("lbl1")).add(field("field1"), 2);
layout.row().grid(label("lbl2")).spanRow().add(field("field2"));
layout.row().center().fill().add(new JSeparator());

// spanrow() called with no matching item
layout.row().grid(label("lbl1")).add(field("field1"), 2).add(field("field1"));
layout.row().grid(label("lbl2")).spanRow();
layout.row().center().fill().add(new JSeparator());

// spanrow() called on non matching subgrids
layout.row().grid(label("lbl11"), 2).add(field("field1")).grid(label("lbl13")).add(field("field1"));
layout.row().grid(label("lbl21"), 1).add(field("field2")).grid(label("lbl22")).spanRow();
layout.row().center().fill().add(new JSeparator());

// spanrow() called while the previous row is not a gridrow
layout.row().left().add(button());
layout.row().grid(label("lbl1")).spanRow();
layout.row().center().fill().add(new JSeparator());

// multiple spanrow() in consecutive gridrows, the first being bad
// Note: the red marker must span rows 2 & 3
layout.row().grid(label("lbl1")).add(field("field1"), field("field1"), field("field1"));
layout.row().grid(label("lbl2")).add(field("field2")).spanRow();
layout.row().grid(label("lbl3")).add(field("field3")).spanRow();
+------------------------------------------------------------------------------+

[images/RowSpan4ErrorMarkers-org.png] Example of markers for "spanRow()" misuse

	This way, you can spot all mistakes made in any dialog, and fix them all at
	once. Note that each marker above has a tooltip that describes further the
	reason why <<<spanRow()>>> cannot work properly.

Automatic support for right-to-left text orientation

	DesignGridLayout transparently supports right-to-left languages (such as 
	Arabic or Hebrew) depending on the current default Locale used by the 
	application. You don't need any special action on your layout code for it to 
	work: this comes for free!
	
	The following screenshots demonstrate the same dialog (with exactly the same
	layout code, excerpted hereafter) one using the "usual" left-to-right text
	orientation, the other using right-to-left.

[images/RightToLeft1LTR-resize-1-org.png] Sample form with left-to-right orientation

	Sample dialog with left-to-right orientation
	
[images/RightToLeft2RTL-resize-1-org.png] Sample form with right-to-left orientation

	Same dialog with right-to-left orientation

	Note that there are several ways in Swing to change text orientation in 
	dialogs:
	
	*	As mentioned above, set the default Locale for the application, through
		<<<Locale.setDefaultLocale(new Locale(...))>>>: all Swing visuals are
		impacted
		
	*	Set the default Locale to be used by Swing exclusively, through
		<<<JComponent.setDefaultLocale(new Locale(...))>>>: all Swing visuals 
		are impacted
		
	*	Set the Locale for a given dialog or frame only, through
		<<<JComponent#setLocale(new Locale(...))>>>: only the given dialog is
		impacted
		
	*	Directly set the <<<ComponentOrientation>>> of a given dialog or frame,
		through <<<JComponent#applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT)>>>:
		only the given dialog is impacted and the Locale is independent of the
		selected text orientation (as in the right-to-left screenshot above).
	
	[]
	
	Also note that changing a Locale works only if it has been installed in your 
	JRE (which depends on the way you have installed your JRE).

Where to go next?

	This section has covered the main features of DesignGridLayout. A few other
	features exist but are not yet presented here. You may want to consult the 
	{{{./apidocs/index.html}API javadoc}} which contains the official reference 
	for DesignGridLayout.

	Now you are ready to use DesignGridLayout in your own programs!
	
	