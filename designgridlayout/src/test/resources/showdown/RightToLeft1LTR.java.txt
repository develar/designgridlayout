abstract public class AbstractRightToLeft extends AbstractBaseExample
{
	protected AbstractRightToLeft(ComponentOrientation orientation)
	{
		_orientation = orientation;
	}
	
	@Override public void build(DesignGridLayout layout)
	{
		layout.row().grid(label("L1")).add(field("Field11")).add(field("F12"));
		layout.row().grid(label("Label2")).add(field("2nd field"));
		layout.row().grid(label("Lbl3")).add(field("F3"), 2);
		layout.row().grid(label("L4")).empty().add(field("Field4"), 2).empty();
		layout.row().grid().add(field("F5"), 4);
		layout.row().center().add(button("B1"), button("Button2"), button("3"));
		layout.row().left().add(button("B1"), button("Button2"), button("3"));
		layout.row().right().add(button("B1"), button("Button2"), button("3"));
		layout.row().center().add(button("B1"), button("Button2"), button("3")).fill();
		layout.row().left().fill().add(button("B1"), button("Button2"), button("3"));
		layout.row().right().add(button("B1"), button("Button2"), button("3")).fill();
	}

	@Override protected void prePack()
	{
		frame().applyComponentOrientation(_orientation);
	}
	
	final private ComponentOrientation _orientation;
}

public class RightToLeft1LTR extends AbstractRightToLeft
{
	public RightToLeft1LTR()
    {
	    super(ComponentOrientation.LEFT_TO_RIGHT);
    }
}
