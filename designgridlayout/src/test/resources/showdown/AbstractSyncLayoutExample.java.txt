public abstract class AbstractSyncLayoutExample extends AbstractBaseExample
{
	protected AbstractSyncLayoutExample(boolean vertical)
	{
		_vertical = vertical;
	}

	protected AbstractSyncLayoutExample()
	{
		this(true);
	}

	// This abstract AbstractBaseExample method is not used here
	@Override protected void build(DesignGridLayout layout)
	{
	}

	@Override public void go(boolean exitOnClose)
    {
    	_frame = new JFrame(name());
    	_frame.setName(getClass().getSimpleName());
    
    	_frame.setDefaultCloseOperation(exitOnClose
    		? JFrame.EXIT_ON_CLOSE
    		: WindowConstants.DISPOSE_ON_CLOSE);
    	_top = createTopPanel();
    	_top.setName("TOP");
    	build();
    
    	_frame.add(_top);
    	prePack();
    	_frame.pack();
    	_frame.setLocationRelativeTo(null);
    	_frame.setVisible(true);
    }
	
	abstract protected void build();

	// Default behavior is to use a BoxLayout top panel (direction is 
	// selectable at construction time)
	protected JComponent createTopPanel()
	{
    	JPanel top = new JPanel();
    	BoxLayout box = new BoxLayout(
    		top, _vertical ? BoxLayout.Y_AXIS : BoxLayout.X_AXIS);
    	top.setLayout(box);
		return top;
	}

	protected DesignGridLayout createSubPanel(Border border, String position)
	{
    	JPanel panel = new JPanel();
    	DesignGridLayout layout = new DesignGridLayout(panel);
    	if (border != null)
    	{
    		panel.setBorder(border);
    	}
    	_top.add(panel, position);
    	return layout;
	}
	
	protected DesignGridLayout createSubPanel(Border border)
	{
		return createSubPanel(border, null);
	}
	
	protected DesignGridLayout createSubPanel(String position)
	{
    	return createSubPanel(null, position);
	}
	
	protected DesignGridLayout createSubPanel()
    {
		return createSubPanel(null, null);
    }
	
	private JComponent _top;
	private final boolean _vertical;
}
